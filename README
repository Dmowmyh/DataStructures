To run the project follow these steps:

Installation steps:
in project folder:
1) git submodule init
2) git submodule update
3) mkdir build
4) cd build
5) cmake ..
6) Run make

7) Start sandbox executable
    Sandbox executable serves if you want to try out functionality.
    I have added some speed tests against std::sort

8) Or start unit_tests executable
    Unit_tests executable runs:
    1) Edge case tests
    2) random input tests compared against a known working library
    * Uses catch2 library for tests

Notes:
Question: Find the median from arbitrary input.

Structure:
    Heap - class that implements a heap data structure
    HeapMedian - the algorithm uses the two heap approach where there is left_heap(max_heap)
    that stores the lower values and right_heap(min_heap) that stores the bigger values.

    Motivation for choosing this solution:
        1) Using unsorted array + quick median algorithm complexity is O(n).
            Drawback is having to recalculate the median every time we need it.

        2) Sorting the array once and keeping the array sorted.
            Complexity is O(n) because we have to shift everything to the right in the worst
            case

        3) Linked list's
            Drawback cannot use binary search so searching is slow insertion could
            probably take O(n) to first search for the right place to insert.

        4) Heap data structure
            Insertion O(logn) - Tree structure traversal
            FindMedian O(1) - Median is always located on top of root


